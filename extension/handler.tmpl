{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

// Code generated by ogent-auth, DO NOT EDIT.
package ogentauth

import (
  "context"
  "errors"

{{- if not (eq (len $.SecuritySchemes) 0) }}
  "{{ .Package }}/ogent"

  sessions "github.com/tiagoposse/go-auth/sessions"
{{- end }}
  authz "github.com/tiagoposse/go-auth/authorization"
)

type ISessionHandler interface {
{{- range $scheme, $schemeConfig := $.SecuritySchemes }}
  Validate{{ $scheme }}(context.Context, string) (authz.ScopedSession, error)
{{- end }}

  CreateSessionToken(context.Context, any) (string, error)
  ValidateSessionToken(context.Context, string) (authz.ScopedSession, error)
}

type SecurityHandler struct {
  ISessionHandler
}

func NewSecurityHandler(sess ISessionHandler) *SecurityHandler {
  return &SecurityHandler{
    ISessionHandler: sess,
  }
}

{{ range $scheme, $schemeConfig := $.SecuritySchemes }}
func (h *SecurityHandler) Handle{{ $scheme }}(c context.Context, operationName string, t ogent.{{ $scheme }}) (context.Context, error) {
  session, err := h.Validate{{ $scheme }}(c, t.{{ if eq $schemeConfig.Type "http" }}Token{{ else if eq $schemeConfig.Type "apiKey" }}APIKey{{ end }})
	if err != nil {
		return c, err
	}

  ctx := context.WithValue(c, sessions.ContextSessionKey{}, session)
  if err := ValidateScopes(operationName, session.GetScopes()); err != nil {
    return ctx, err
  }

	return ctx, nil
}
{{ end }}

func ValidateScopes(operationName string, reqScopes authz.Scopes) error {
  if opScopes, ok := scopes[operationName]; ok {
    found := false
    for _, reqScope := range reqScopes {
      for _, opScope := range opScopes {
        if reqScope == opScope {
          found = true
          break
        }
      }
      if found {
        break
      }
    }

    if !found {
      return errors.New("no scopes match")
    }
  }

  return nil
}

var scopes map[string]authz.Scopes = map[string]authz.Scopes{
{{- range $op, $opScopes := $.Scopes }}
  "{{ $op }}": {
  {{- range $scope := $opScopes }}
    "{{ $scope }}",
  {{- end }}
  },
{{- end }}
}
